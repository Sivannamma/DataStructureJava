
public class MaxHeap {
	int[] heap;
	int count; // to know how many values we inserter to the array

	public MaxHeap(int capacity) { // default constructor to initialize size of array
		heap = new int[capacity];
		count = 0;
	}

	public MaxHeap(int[] arr)// constructor that gets full array
	{
		this.count = arr.length;
		heap = new int[count];
		for (int i = 0; i < arr.length; i++) {
			heap[i] = arr[i];
		}
		heapify(0);
	}

	public void heapify(int i) {
		int left = leftChild(i);
		int right = rightChild(i);
		int max = i;

		if (left < count) {
			if (heap[i] < heap[left])
				max = left;
			else
				max = i;
		}
		if (right < count)
			if (heap[right] > heap[max])
				max = right;
		if (max != i) {
			swap(max, i);
			heapify(max);
		}
	}

	public boolean insert(int value) {
		if (count == heap.length)
			return false;
		heap[count++] = value;
		swapUp(count - 1);
		return true;
	}

	private void swapUp(int i) {
		if (i == 0)
			return;
		int p = parent(i);
		if (heap[p] < heap[i])
			swap(p, i);
		swapUp(p);
	}

	private void swap(int p, int i) {
		int temp = heap[p];
		heap[p] = heap[i];
		heap[i] = temp;
	}

	private int parent(int i) {
		return (i - 1) / 2;
	}

	private int leftChild(int p) {
		return p * 2 + 1;
	}

	private int rightChild(int p) {
		return p * 2 + 2;
	}

}
